@page "/"
@using ChartJs.Blazor.PieChart
@using ChartJs.Blazor.BarChart

<style>
    .subItem {
        padding-left: 100px;
    }
</style>

<div>
    @*<Chart Config="_config"></Chart>*@

    <Chart Config="_config"></Chart>
</div>
<p></p>
<hr />
<p></p>


<h3>Account-Transaction-Model [using Worker Service@@ Web-API Core]</h3>
<p></p>
<MudCard>
    <MudCardContent>
        <MudList Clickable="false">
            <MudListItem Text="Blazor-Server-App calls Web-Api Core[Worker-Service] to generate"
                         InitiallyExpanded="true">
                <NestedList>
                    <MudListItem>
                        <span class="subItem">
                            - randomly 10-Users, 10-Payees, 30-Accounts and 100-Transactions
                        </span>
                    </MudListItem>
                </NestedList>
            </MudListItem>
            <MudListItem>
                Blazor-Server-App display[Table/Chart] live update from Users, Payees, Accounts and Transactions
            </MudListItem>
        </MudList>
    </MudCardContent>
    <MudCardActions>
        <MudElement HtmlTag="a"
                    Class="ma-0"
                    Style="color:red;font-weight:bold;"
                    href="https://github.com/Ankithorizon/Transaction-Model-Blazor-WorkerThread"
                    target="blank"
                    rel="noopener noreferrer">
            Source-Code
        </MudElement>
    </MudCardActions>
</MudCard>

@code{
        Color _color = Color.Primary;

    //private PieConfig _config;

        //protected override async Task OnInitializedAsync()
        //{
        //    _config = new PieConfig
        //    {
        //        Options = new PieOptions
        //        {
        //            Responsive = true,
        //            Title = new OptionsTitle
        //            {
        //                Display = true,
        //                Text = "ChartJs.Blazor Pie Chart"
        //            }
        //        }
        //    };

        //    foreach (string color in new[] { "Red", "Yellow", "Green", "Blue" })
        //    {
        //        _config.Data.Labels.Add(color);
        //    }

        //    PieDataset<int> dataset = new PieDataset<int>(new[] { 6, 5, 3, 7 })
        //    {
        //        BackgroundColor = new[]
        //        {
        //        ColorUtil.ColorHexString(255, 99, 132), // Slice 1 aka "Red"
        //        ColorUtil.ColorHexString(255, 205, 86), // Slice 2 aka "Yellow"
        //        ColorUtil.ColorHexString(75, 192, 192), // Slice 3 aka "Green"
        //        ColorUtil.ColorHexString(54, 162, 235), // Slice 4 aka "Blue"
        //    }
        //    };

        //    _config.Data.Datasets.Add(dataset);
        //}


    private BarConfig _config;
    protected override void OnInitialized()
    {
        _config = new BarConfig
        {
            Options = new BarOptions
            {
                Responsive = true,
                Title = new OptionsTitle
                {
                    Display = true,
                    Text = "Bar Chart"
                }
            }
        };

        foreach (string color in new[] { "Red", "Green" })
        {
            _config.Data.Labels.Add(color);
        }

        BarDataset<int> datasetIn = new BarDataset<int>(new[] { 6, 5, 3, 7 });
        BarDataset<int> datasetOut = new BarDataset<int>(new[] { 3, 7, 8, 2 });
        _config.Data.Datasets.Add(datasetIn);
        _config.Data.Datasets.Add(datasetOut);
    }

}

