@page "/accountmgr"
<!-- web api connector -->
@inject BlazorServer_Transaction.ApiCallHelpers.AccountApiClient accountApi
<!-- service project connector -->
@inject Service_Transaction.Contracts.IAccountRepository accountService
@using EFCore_Transaction.Models
@using Service_Transaction.DTO
@inject MudBlazor.ISnackbar snackBar

<style>
    .refreshBtn {
        font-size: medium;
        padding: 30px;
        margin: 10px;
    }

    .addAccountsBtn {
        font-size: medium;
        padding: 30px;
        margin: 10px;
    }

    .btnHeader {
        padding-bottom: 10px;
        margin-bottom: 10px;
        font-weight: bold;
        font-size: x-large;
    }

    .btnDetails {
        margin-top: 25px;
        margin-bottom: 50px;
        font-size: large;
        color: blue;
        font-weight: bold;
        background-color: white;
        padding: 10px;
    }

    .bkpResponse {
        margin-top: 15px;
        font-size: x-large;
        color: white;
        font-weight: bold;
        background-color: black;
        padding: 10px;
    }

    .noData {
        color: red;
        font-size: x-large;
        font-weight: bold;
    }
</style>
<h1>Manage Accounts!</h1>
<!-- add accounts to db by background-worker-process @@ web-api -->
<div class="container d-flex justify-space-around">
    <MudButton Class="addAccountsBtn"
               @onclick="@( (x) => CallWorkerProcess_DB())"
               Variant="Variant.Filled"
               Color="Color.Tertiary">
        <span>
            <span class="oi oi-file btnHeader" aria-hidden="true">
                Add Accounts To DataBase
            </span>
            <br />
            <span class="btnDetails">
                [Blazor App --&gt;&gt; Web API [Account-Controller --&gt;&gt; Worker-Service(StartAsync)] ]
            </span>
        </span>
    </MudButton>
</div>
<p></p>
<!-- response from db-background-worker-process @@ web-api -->
<div class="container d-flex justify-space-around">
    @if (BKP_Response_DB.Response != null)
    {
        <div class="container bkpResponse d-flex justify-space-around">
            @BKP_Response_DB.Response
        </div>
    }
</div>
<p></p>


<MudPaper Square="true" Class="d-flex justify-space-around">
    <!-- payees -->
    <MudTable Items="@accounts"
              @ref="table"
              Breakpoint="Breakpoint.Sm"
              MultiSelection="true"
              Hover="@hover">
        <HeaderContent>
            <MudTh>#</MudTh>
            <MudTh>Account Number</MudTh>
            <MudTh>Balance</MudTh>
            <MudTh>User #</MudTh>
            <MudTh>Account Type</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="AccountId">@context.AccountId</MudTd>
            <MudTd DataLabel="AccountNumber">@context.AccountNumber</MudTd>
            <MudTd DataLabel="Balance">@context.Balance</MudTd>
            <MudTd DataLabel="UserId">@context.UserId</MudTd>
            <MudTd DataLabel="AccountType">@GetAccountType(context.AccountType)</MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[] { 50, 100 }" />
        </PagerContent>
    </MudTable>
</MudPaper>


@code {

    public Array accountTypes = Enum.GetValues(typeof(AccountType));

    private bool hover = true;

    // very first load of table for accounts,,, displays number of rows
    // in table
    // @ref="table" code in table configuration
    private MudTable<Account> table;
    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        table.SetRowsPerPage(5);
        return base.OnAfterRenderAsync(firstRender);
    }

    // response from background-worker-process
    private BKProcessResponse BKP_Response_DB = new BKProcessResponse();
    private BKProcessResponse BKP_Response_CSVFile = new BKProcessResponse();

    private List<Account> accounts = new List<Account>();

    private string GetAccountType(int acType)
    {
        return accountTypes.GetValue(acType).ToString();
    }


    // add accounts to db
    // call worker-process
    // via web-api call
    private async Task CallWorkerProcess_DB()
    {
        BKP_Response_DB = await accountApi.AddAccountsToDB_BackgroundWorkerProcessAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        // call to api-account-controller
        // this account-controller[api-worker-service-controller],,,
        // next uses account-repository[data-access-service] to access database
        accounts = await accountApi.GetAccountsAsync();
    }

}

