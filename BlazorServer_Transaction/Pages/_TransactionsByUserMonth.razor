@page "/transactionsByUserMonth"
<!-- web api connector -->
@inject BlazorServer_Transaction.ApiCallHelpers.TransactionApiClient transactionApi
<!-- service project connector -->
@inject Service_Transaction.Contracts.ITransactionRepository transactionService
@inject Service_Transaction.Contracts.IUserRepository userService
@inject Service_Transaction.Contracts.IChartRepository chartService

@using EFCore_Transaction.Models
@using Service_Transaction.DTO
@inject MudBlazor.ISnackbar snackBar

@using ChartJs.Blazor.BarChart
@using ChartJs.Blazor.PieChart

<style>
    .filterDiv {
        padding-top: 30px;
    }

    .filterBtn {
        padding-top: 20px;
    }

    .noData {
        color: red;
        font-size: x-large;
        font-weight: bold;
    }
    .userInfo{
        color : blue;
        font-size: larger;
        font-weight: bold;
    }
</style>


<h1>Transactions By User-Month!</h1>
<p></p>
@if (showChart)
{
    <div class="container">
        <MudGrid>
            <MudItem lg="3" md="12" sm="12" xs="12">
            </MudItem>
            <MudItem lg="6" md="12" sm="12" xs="12">
                <MudPaper>
                    @if (selectedUser != null && selectedMonth != null)
                    {
                        <MudCard>
                            <MudCardContent>
                                <div class="userInfo">
                                    User : @selectedUser.UserName
                                    <p></p>
                                    Month : @selectedMonth.MonthName
                                </div>
                                <p></p>
                                <ChartJs.Blazor.Chart Config="_configPie"></ChartJs.Blazor.Chart>
                            </MudCardContent>
                        </MudCard>
                    }
                    else
                    {
                        <MudCard>
                            <MudCardContent>
                                <div class="noData">
                                    No Content
                                </div>
                            </MudCardContent>
                        </MudCard>
                    }
                </MudPaper>
            </MudItem>
            <MudItem lg="3" md="12" sm="12" xs="12">
            </MudItem>
        </MudGrid>
    </div>
}
<p></p>
<hr />
<p></p>
<div class="container filterDiv">
    <MudGrid>
        <MudItem xs="3">
            <MudSelect @bind-Value="selectedUser"
                       AnchorOrigin="Origin.BottomCenter"
                       HelperText="Select - User"
                       AdornmentColor="Color.Secondary">
                @foreach (var data in users)
                {
                    <MudSelectItem Value="@data">@data.UserName</MudSelectItem>
                }
            </MudSelect>
        </MudItem>
        <MudItem xs="3">
            <MudSelect @bind-Value="selectedMonth"
                       AnchorOrigin="Origin.BottomCenter"
                       HelperText="Select - Month"
                       AdornmentColor="Color.Primary">
                @foreach (var data in months)
                {
                    <MudSelectItem Value="@data">@data.MonthName</MudSelectItem>
                }
            </MudSelect>
        </MudItem>
        <MudItem xs="3">
            <div class="filterBtn">
                <MudButton Variant="Variant.Filled"
                           @onclick="@( (x) => SetTransactionsForSelectedUser(selectedUser))"
                           StartIcon="@Icons.Material.Filled.BarChart"
                           Color="Color.Success">Get Transactions!</MudButton>
            </div>
        </MudItem>
    </MudGrid>
</div>
<p></p>

<MudPaper Square="true" Class="d-flex justify-space-around">
    <!-- transactions -->
    @if (transactions != null && transactions.Count() > 0)
    {
        <MudTable Items="@transactions"
                  @ref="table"
                  Breakpoint="Breakpoint.Sm"
                  MultiSelection="true"
                  Hover="@hover">
            <HeaderContent>
                <MudTh>#</MudTh>
                <MudTh>Payee</MudTh>
                <MudTh>Account</MudTh>
                <MudTh>Type</MudTh>
                <MudTh>Amount</MudTh>
                <MudTh>Status</MudTh>
                <MudTh>Current Balance</MudTh>
                <MudTh>Last Balance</MudTh>
                <MudTh>Ref-Code</MudTh>
                <MudTh>Date</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="TransactionId">@context.TransactionId</MudTd>
                <MudTd DataLabel="PayeeId">@context.PayeeId</MudTd>
                <MudTd DataLabel="AccountId">@context.AccountId</MudTd>
                <MudTd DataLabel="TransactionType">@GetTransactionType(context.TransactionType)</MudTd>
                <MudTd DataLabel="TransactionAmount">@context.TransactionAmount</MudTd>
                <MudTd DataLabel="TransactionStatus">@GetTransactionStatus(context.TransactionStatus)</MudTd>
                <MudTd DataLabel="CurrentBalance">@context.CurrentBalance</MudTd>
                <MudTd DataLabel="LastBalance">@context.LastBalance</MudTd>
                <MudTd DataLabel="RefCode">@context.RefCode</MudTd>
                <MudTd DataLabel="TransactionDate">@Convert.ToDateTime(@context.TransactionDate).ToString("dd, MMM yy")</MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager PageSizeOptions="new int[] { 50, 100 }" />
            </PagerContent>
        </MudTable>
    }
    else
    {
        <MudPaper>
            <MudCard>
                <MudCardContent>
                    <span class="noData">
                        Transactions Not Available!
                    </span>
                </MudCardContent>
            </MudCard>
        </MudPaper>
    }
</MudPaper>

@code{
    private bool showChart = false;

    // select list user
    private List<UserList> users = new List<UserList>();
    private UserList selectedUser = new UserList();

    // select list month
    private List<Month> months = new List<Month>();
    private Month selectedMonth = new Month();


    public Array transactionTypes = Enum.GetValues(typeof(TransactionType));
    public Array transactionStatus = Enum.GetValues(typeof(TransactionStatus));

    private bool hover = true;

    // very first load of table for transactions,,, displays number of rows
    // in table
    // @ref="table" code in table configuration
    private MudTable<Transaction> table = new MudTable<Transaction>();
    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (transactions != null && transactions.Count() > 0)
        {
            table.SetRowsPerPage(50);
            return base.OnAfterRenderAsync(firstRender);
        }
        else
        {
            return base.OnAfterRenderAsync(firstRender);
        }
    }

    private List<Transaction> transactions = new List<Transaction>();

    private string GetTransactionType(int trType)
    {
        return transactionTypes.GetValue(trType).ToString();
    }
    private string GetTransactionStatus(int trStatus)
    {
        return transactionStatus.GetValue(trStatus).ToString();
    }

    private async Task SetTransactionsForSelectedUser(UserList selectedUser)
    {
        transactions = await transactionService.GetTransactionsByUser(selectedUser.UserId);

        pieChartData = await chartService.GetUser_MonthWise_Total_InOut_ChartReport(selectedUser.UserId, selectedMonth);

        // chartjs.mudblazor chart        
        CreateChartJsBlazorPieChart();
    }


    protected override async Task OnInitializedAsync()
    {
        months = chartService.GetMonths();

        users = await userService.GetUserList();
        users = new List<UserList>(users.Where(x => x.UserId != 0)).ToList();

        transactions = await transactionService.GetTransactionsByUser(0);

        // chartjs.mudblazor
        initChartJsMudBlazorPieChart();
    }

    private UserMonthTotalInOutData pieChartData;
    private int Index = -1;

    // chartjs.mudblazor
    private PieConfig _configPie;

    // pie chart
    private void initChartJsMudBlazorPieChart()
    {
        _configPie = new PieConfig();

        _configPie.Options = new PieOptions
        {
            Responsive = true,
            Title = new OptionsTitle
            {
                Display = true,
                Text = "$In v/s $Out"
            }
        };
        foreach (string labels in new[] { "Total IN-$", "Total OUT-$" })
        {
            _configPie.Data.Labels.Add(labels);
        }
    }
    public void CreateChartJsBlazorPieChart()
    {
        PieDataset<decimal> dataset = new PieDataset<decimal>(new[] { pieChartData.TotalIn, pieChartData.TotalOut })
        {
            BackgroundColor = new[]
            {
                ColorUtil.ColorHexString(75, 192, 192),
                ColorUtil.ColorHexString(255, 99, 132),
            }
        };

        _configPie.Data.Datasets.Clear();

        _configPie.Data.Datasets.Add(dataset);

        showChart = true;
    }

}

