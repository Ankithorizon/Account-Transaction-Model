// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace BlazorServer_Transaction.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Transaction-Model\APITransaction\BlazorServer_Transaction\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Transaction-Model\APITransaction\BlazorServer_Transaction\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Transaction-Model\APITransaction\BlazorServer_Transaction\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Transaction-Model\APITransaction\BlazorServer_Transaction\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Transaction-Model\APITransaction\BlazorServer_Transaction\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Transaction-Model\APITransaction\BlazorServer_Transaction\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Transaction-Model\APITransaction\BlazorServer_Transaction\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Transaction-Model\APITransaction\BlazorServer_Transaction\_Imports.razor"
using BlazorServer_Transaction;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Transaction-Model\APITransaction\BlazorServer_Transaction\_Imports.razor"
using BlazorServer_Transaction.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "C:\Transaction-Model\APITransaction\BlazorServer_Transaction\_Imports.razor"
using MudBlazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "C:\Transaction-Model\APITransaction\BlazorServer_Transaction\_Imports.razor"
using ChartJs.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "C:\Transaction-Model\APITransaction\BlazorServer_Transaction\_Imports.razor"
using ChartJs.Blazor.Common;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "C:\Transaction-Model\APITransaction\BlazorServer_Transaction\_Imports.razor"
using ChartJs.Blazor.Common.Axes;

#line default
#line hidden
#nullable disable
#nullable restore
#line 17 "C:\Transaction-Model\APITransaction\BlazorServer_Transaction\_Imports.razor"
using ChartJs.Blazor.Common.Axes.Ticks;

#line default
#line hidden
#nullable disable
#nullable restore
#line 18 "C:\Transaction-Model\APITransaction\BlazorServer_Transaction\_Imports.razor"
using ChartJs.Blazor.Common.Enums;

#line default
#line hidden
#nullable disable
#nullable restore
#line 19 "C:\Transaction-Model\APITransaction\BlazorServer_Transaction\_Imports.razor"
using ChartJs.Blazor.Common.Handlers;

#line default
#line hidden
#nullable disable
#nullable restore
#line 20 "C:\Transaction-Model\APITransaction\BlazorServer_Transaction\_Imports.razor"
using ChartJs.Blazor.Common.Time;

#line default
#line hidden
#nullable disable
#nullable restore
#line 21 "C:\Transaction-Model\APITransaction\BlazorServer_Transaction\_Imports.razor"
using ChartJs.Blazor.Util;

#line default
#line hidden
#nullable disable
#nullable restore
#line 22 "C:\Transaction-Model\APITransaction\BlazorServer_Transaction\_Imports.razor"
using ChartJs.Blazor.Interop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Transaction-Model\APITransaction\BlazorServer_Transaction\Pages\_TransactionsByUserPayee.razor"
using EFCore_Transaction.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Transaction-Model\APITransaction\BlazorServer_Transaction\Pages\_TransactionsByUserPayee.razor"
using Service_Transaction.DTO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "C:\Transaction-Model\APITransaction\BlazorServer_Transaction\Pages\_TransactionsByUserPayee.razor"
using ChartJs.Blazor.BarChart;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/transactionsByUserPayee")]
    public partial class _TransactionsByUserPayee : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 124 "C:\Transaction-Model\APITransaction\BlazorServer_Transaction\Pages\_TransactionsByUserPayee.razor"
       

    private bool showChart = false;

    // select list
    private List<UserList> users = new List<UserList>();
    private UserList selectedUser = new UserList();

    public Array transactionTypes = Enum.GetValues(typeof(TransactionType));
    public Array transactionStatus = Enum.GetValues(typeof(TransactionStatus));

    private bool hover = true;

    // very first load of table for transactions,,, displays number of rows
    // in table
    // @ref="table" code in table configuration
    private MudTable<Transaction> table = new MudTable<Transaction>();
    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (transactions != null && transactions.Count() > 0)
        {
            table.SetRowsPerPage(50);
            return base.OnAfterRenderAsync(firstRender);
        }
        else
        {
            return base.OnAfterRenderAsync(firstRender);
        }
    }

    private List<Transaction> transactions = new List<Transaction>();

    private string GetTransactionType(int trType)
    {
        return transactionTypes.GetValue(trType).ToString();
    }
    private string GetTransactionStatus(int trStatus)
    {
        return transactionStatus.GetValue(trStatus).ToString();
    }

    private async Task SetTransactionsForSelectedUser(UserList selectedUser)
    {
        transactions = await transactionService.GetTransactionsByUser(selectedUser.UserId);

        chartDatas = await chartService.GetPayee_InOut_ChartReport(selectedUser.UserId);

        // chartjs.mudblazor chart
        CreateChartJsBlazorBarChart();
    }


    protected override async Task OnInitializedAsync()
    {
        users = await userService.GetUserList();
        users = new List<UserList>(users.Where(x => x.UserId != 0)).ToList();

        transactions = await transactionService.GetTransactionsByUser(0);

        // chartjs.mudblazor
        initChartJsMudBlazorBarChart();
    }


    // chart-data
    // List<Payee_InOut>
    private List<Payee_InOut> chartDatas;
    private int Index = -1;

    // chartjs.mudblazor
    private BarConfig _config;
    // bar chart
    private void initChartJsMudBlazorBarChart()
    {
        _config = new BarConfig();
        _config.Options = new BarOptions
        {
            Responsive = true,
            Title = new OptionsTitle
            {
                Display = true,
                Text = "Payee $In v/s $Out"
            }
        };
        foreach (string month in new[] { "P1", "P2", "P3"})
        {
            _config.Data.Labels.Add(month);
        }
    }
    public void CreateChartJsBlazorBarChart()
    {
        _config.Data.Labels.Clear();
        foreach (var payee in chartDatas)
        {
            _config.Data.Labels.Add(payee.Payee);
        }


        var ary = new decimal[chartDatas.Count];
        for (var ii = 0; ii < chartDatas.Count; ii++)
        {
            ary[ii] = chartDatas[ii].TotalIn;
        }
        var aryOut = new decimal[chartDatas.Count];
        for (var ii = 0; ii < chartDatas.Count; ii++)
        {
            aryOut[ii] = chartDatas[ii].TotalOut;
        }
        BarDataset<decimal> datasetIn = new BarDataset<decimal>(ary);
        BarDataset<decimal> datasetOut = new BarDataset<decimal>(aryOut);

        datasetIn.BackgroundColor = new[]
        {
            ColorUtil.ColorHexString(75, 192, 192),
            ColorUtil.ColorHexString(75, 192, 192),
            ColorUtil.ColorHexString(75, 192, 192),
            ColorUtil.ColorHexString(75, 192, 192),
            ColorUtil.ColorHexString(75, 192, 192),
            ColorUtil.ColorHexString(75, 192, 192),
            ColorUtil.ColorHexString(75, 192, 192),
            ColorUtil.ColorHexString(75, 192, 192),
            ColorUtil.ColorHexString(75, 192, 192),
            ColorUtil.ColorHexString(75, 192, 192),
            ColorUtil.ColorHexString(75, 192, 192),
            ColorUtil.ColorHexString(75, 192, 192),
            ColorUtil.ColorHexString(75, 192, 192),
            ColorUtil.ColorHexString(75, 192, 192),
            ColorUtil.ColorHexString(75, 192, 192),
            ColorUtil.ColorHexString(75, 192, 192),
            ColorUtil.ColorHexString(75, 192, 192),
            ColorUtil.ColorHexString(75, 192, 192),
            ColorUtil.ColorHexString(75, 192, 192),
            ColorUtil.ColorHexString(75, 192, 192),
            ColorUtil.ColorHexString(75, 192, 192),
        };
        datasetIn.Label = "$IN$";


        datasetOut.BackgroundColor = new[]
        {
            ColorUtil.ColorHexString(255, 99, 132),
            ColorUtil.ColorHexString(255, 99, 132),
            ColorUtil.ColorHexString(255, 99, 132),
            ColorUtil.ColorHexString(255, 99, 132),
            ColorUtil.ColorHexString(255, 99, 132),
            ColorUtil.ColorHexString(255, 99, 132),
            ColorUtil.ColorHexString(255, 99, 132),
            ColorUtil.ColorHexString(255, 99, 132),
            ColorUtil.ColorHexString(255, 99, 132),
            ColorUtil.ColorHexString(255, 99, 132),
            ColorUtil.ColorHexString(255, 99, 132),
            ColorUtil.ColorHexString(255, 99, 132),
            ColorUtil.ColorHexString(255, 99, 132),
            ColorUtil.ColorHexString(255, 99, 132),
            ColorUtil.ColorHexString(255, 99, 132),
            ColorUtil.ColorHexString(255, 99, 132),
            ColorUtil.ColorHexString(255, 99, 132),
            ColorUtil.ColorHexString(255, 99, 132),
            ColorUtil.ColorHexString(255, 99, 132),
            ColorUtil.ColorHexString(255, 99, 132),
            ColorUtil.ColorHexString(255, 99, 132),
        };
        datasetOut.Label = "$OUT$";

        _config.Data.Datasets.Clear();

        _config.Data.Datasets.Add(datasetIn);
        _config.Data.Datasets.Add(datasetOut);

        showChart = true;
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private MudBlazor.ISnackbar snackBar { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private Service_Transaction.Contracts.IChartRepository chartService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private Service_Transaction.Contracts.IUserRepository userService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private Service_Transaction.Contracts.ITransactionRepository transactionService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private BlazorServer_Transaction.ApiCallHelpers.TransactionApiClient transactionApi { get; set; }
    }
}
#pragma warning restore 1591
